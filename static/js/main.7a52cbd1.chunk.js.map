{"version":3,"sources":["components/LineChart/index.js","components/ErrorOrLoader/index.js","utils/request.js","components/AddPoint/index.js","containers/HomePage/index.js","containers/App/index.js","serviceWorker.js","index.js"],"names":["LineChart","_ref","data","width","height","margin","gridLines","h","w","points","map","p","x","Date","y","sort","a","b","yFormat","d3","domain","d","range","line","curve","alpha","xTicks","ticks","i","react_default","createElement","key","concat","transform","toLocaleDateString","toLocaleTimeString","x1","x2","y1","y2","yTicks","stroke","className","ErrorOrLoader","isError","Spinner","size","baseURL","parseJSON","response","status","json","checkStatus","error","Error","statusText","request","endpoint","options","fetch","then","AddPoint","onAddPoint","_useState","useState","_useState2","Object","slicedToArray","rangeValue","setRangeValue","_useState3","_useState4","dateTime","setDateTime","_useState5","_useState6","setIsError","_useState7","_useState8","isSucess","setIsSuccess","onValueChange","useCallback","value","onDateChange","onAddPointClick","point","method","body","JSON","stringify","setTimeout","catch","FieldRange","min","max","step","onChange","DateTimePicker","defaultValue","timeIsEditable","onClick","HomePage","setData","useEffect","result","values","toConsumableArray","react","length","components_LineChart","components_ErrorOrLoader","components_AddPoint","App","Fragment","containers_HomePage","Boolean","window","location","hostname","match","ReactDOM","render","containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4UA2EeA,MAvEf,SAAAC,GAA+D,IAA1CC,EAA0CD,EAA1CC,KAAMC,EAAoCF,EAApCE,MAAOC,EAA6BH,EAA7BG,OAAQC,EAAqBJ,EAArBI,OAAQC,EAAaL,EAAbK,UAC1CC,EAAIH,EAAS,EAAIC,EACjBG,EAAIL,EAAQ,EAAIE,EAEhBI,EAASP,EACZQ,IAAI,SAAAC,GAAC,MAAK,CACTC,EAAG,IAAIC,KAAKF,EAAEC,GACdE,EAAGH,EAAEG,KAENC,KAAK,SAACC,EAAGC,GAAJ,OAAUA,EAAEL,EAAII,EAAEJ,IAEpBM,EAAUC,IAAU,MAGpBP,EAAIO,MAEPC,OAAOD,IAAUV,EAAQ,SAAAY,GAAC,OAAIA,EAAET,KAChCU,MAAM,CAACjB,EAAQG,IAGZM,EAAIK,MAEPC,OAAO,CAACD,IAAOV,EAAQ,SAAAY,GAAC,OAAIA,EAAEP,IAAIK,IAAOV,EAAQ,SAAAY,GAAC,OAAIA,EAAEP,MACxDQ,MAAM,CAACf,EAAGF,IAEPkB,EAAOJ,MAEVP,EAAE,SAAAS,GAAC,OAAIT,EAAES,EAAET,KACXE,EAAE,SAAAO,GAAC,OAAIP,EAAEO,EAAEP,KACXU,MAAML,IAAmBM,MAAM,KAE5BC,EAASd,EAAEe,MAAM,GAAGjB,IAAI,SAACW,EAAGO,GAAJ,OAC5BhB,EAAES,GAAKhB,GAAUO,EAAES,GAAKb,EACtBqB,EAAAb,EAAAc,cAAA,KAAGC,IAAG,GAAAC,OAAKJ,GAAKK,UAAS,aAAAD,OAAepB,EAAES,GAAjB,KAAAW,OAAuBzB,EAAIF,EAA3B,MACvBwB,EAAAb,EAAAc,cAAA,YAAOT,EAAEa,mBAAmB,OAC5BL,EAAAb,EAAAc,cAAA,QAAMG,UAAU,oBAAoBZ,EAAEc,mBAAmB,OACzDN,EAAAb,EAAAc,cAAA,QAAMM,GAAG,IAAIC,GAAG,IAAIC,GAAG,IAAIC,GAAG,IAAIN,UAAU,sBAE5C,OAGAO,EAAS1B,EAAEa,MAAM,GAAGjB,IAAI,SAACW,EAAGO,GAAJ,OAC5BC,EAAAb,EAAAc,cAAA,KAAGC,IAAG,GAAAC,OAAKJ,GAAKK,UAAS,aAAAD,OAAe3B,EAAf,KAAA2B,OAAyBlB,EAAEO,GAA3B,MACvBQ,EAAAb,EAAAc,cAAA,QAAMlB,EAAE,MAAME,EAAE,KACbI,EAAQG,IAEXQ,EAAAb,EAAAc,cAAA,QAAMW,OAAO,OAAOJ,GAAG,OACtB/B,GACCuB,EAAAb,EAAAc,cAAA,QACEY,UAAU,WACVN,GAAG,IACHC,GAAI7B,EAAIH,EACRiC,GAAG,IACHC,GAAG,IACHN,UAAU,uBAMlB,OACEJ,EAAAb,EAAAc,cAAA,OAAK3B,MAAOA,EAAOC,OAAQA,GACzByB,EAAAb,EAAAc,cAAA,QAAMY,UAAU,OAAON,GAAI/B,EAAQgC,GAAI7B,EAAG8B,GAAI/B,EAAGgC,GAAIhC,IACrDsB,EAAAb,EAAAc,cAAA,QAAMY,UAAU,OAAON,GAAI/B,EAAQgC,GAAIhC,EAAQiC,GAAIjC,EAAQkC,GAAIhC,IAC/DsB,EAAAb,EAAAc,cAAA,QAAMT,EAAGE,EAAKd,KACdoB,EAAAb,EAAAc,cAAA,KAAGY,UAAU,gBAAgBhB,GAC7BG,EAAAb,EAAAc,cAAA,KAAGY,UAAU,gBAAgBF,uBCpDpBG,MAdf,SAAA1C,GAAoC,IAAX2C,EAAW3C,EAAX2C,QACvB,OACEf,EAAAb,EAAAc,cAAA,OAAKY,UAAU,iCACZE,EACCf,EAAAb,EAAAc,cAAA,QAAMY,UAAU,+BAAhB,mCAIAb,EAAAb,EAAAc,cAACe,EAAA,EAAD,CAASC,KAAK,8BCRhBC,UAAU,oCAShB,SAASC,EAAUC,GACjB,OAAwB,MAApBA,EAASC,QAAsC,MAApBD,EAASC,OAC/B,KAEFD,EAASE,OAUlB,SAASC,EAAYH,GACnB,GAAIA,EAASC,QAAU,KAAOD,EAASC,OAAS,IAC9C,OAAOD,EAGT,IAAMI,EAAQ,IAAIC,MAAML,EAASM,YAEjC,MADAF,EAAMJ,SAAWA,EACXI,EAWO,SAASG,EAAQC,EAAUC,GACxC,OAAOC,MAAK,GAAA3B,OAAIe,GAAJf,OAAcyB,GAAYC,GACnCE,KAAKR,GACLQ,KAAKZ,GCwBKa,MAlEf,SAAA5D,GAAkC,IAAd6D,EAAc7D,EAAd6D,WAAcC,EACIC,mBAAS,GADbC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACzBK,EADyBH,EAAA,GACbI,EADaJ,EAAA,GAAAK,EAEAN,mBAAS,6BAFTO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAEzBE,EAFyBD,EAAA,GAEfE,EAFeF,EAAA,GAAAG,EAGFV,oBAAS,GAHPW,EAAAT,OAAAC,EAAA,EAAAD,CAAAQ,EAAA,GAGzB9B,EAHyB+B,EAAA,GAGhBC,EAHgBD,EAAA,GAAAE,EAICb,oBAAS,GAJVc,EAAAZ,OAAAC,EAAA,EAAAD,CAAAW,EAAA,GAIzBE,EAJyBD,EAAA,GAIfE,EAJeF,EAAA,GAM1BG,EAAgBC,sBAAY,SAAAC,GAAK,OAAId,EAAcc,IAAQ,IAC3DC,EAAeF,sBAAY,SAAAC,GAAK,OAAIV,EAAYU,IAAQ,IAExDE,EAAkBH,sBAAY,WAClC,IAAMI,EAAQ,CAAE1E,EAAG4D,EAAU1D,EAAGsD,GAChCZ,EAAQ,UAAW,CAAE+B,OAAQ,OAAQC,KAAMC,KAAKC,UAAUJ,KACvD1B,KAAK,WACJE,EAAWwB,GACXN,GAAa,GACbJ,GAAW,GACXP,EAAc,GACdI,EAAY,6BACZkB,WAAW,kBAAMX,GAAa,IAAQ,OAEvCY,MAAM,WACLhB,GAAW,GACXI,GAAa,MAEhB,CAACZ,EAAYI,IAEhB,OACE3C,EAAAb,EAAAc,cAAA,OAAKY,UAAU,aACbb,EAAAb,EAAAc,cAAA,QAAMY,UAAU,2BAAhB,gBACAb,EAAAb,EAAAc,cAAA,OAAKY,UAAU,iCACbb,EAAAb,EAAAc,cAAC+D,EAAA,EAAD,CACEV,MAAOf,EACP0B,KAAM,GACNC,IAAK,GACLC,KAAM,EACNC,SAAUhB,IAEZpD,EAAAb,EAAAc,cAAA,QAAMY,UAAU,2BAA2B0B,IAE7CvC,EAAAb,EAAAc,cAAA,OAAKY,UAAU,mBACbb,EAAAb,EAAAc,cAAA,QAAMY,UAAU,0BAAhB,wBACAb,EAAAb,EAAAc,cAACoE,EAAA,EAAD,CACEC,aAAc3B,EACdyB,SAAUb,EACVgB,gBAAc,KAGlBvE,EAAAb,EAAAc,cAAA,OAAKY,UAAU,qBACbb,EAAAb,EAAAc,cAAA,OAAKY,UAAU,uBACZE,GACCf,EAAAb,EAAAc,cAAA,QAAMY,UAAU,8BAAhB,mDAIDqC,GACClD,EAAAb,EAAAc,cAAA,QAAMY,UAAU,gCAAhB,6BAKJb,EAAAb,EAAAc,cAAA,UAAQuE,QAAShB,GAAjB,gBCxBOiB,MAnCf,WAAoB,IAAAvC,EACMC,mBAAS,IADfC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACX7D,EADW+D,EAAA,GACLsC,EADKtC,EAAA,GAAAK,EAEYN,oBAAS,GAFrBO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAEX1B,EAFW2B,EAAA,GAEFK,EAFEL,EAAA,GAIlBiC,oBAAU,WACRhD,EAAQ,SACLI,KAAK,SAAA6C,GAAM,OAAIF,EAAQE,EAAOC,UAC9Bd,MAAM,kBAAMhB,GAAW,MACzB,CAAC2B,IAEJ,IAAMzC,EAAaoB,sBAAY,SAAAI,GAAK,OAAIiB,EAAQ,SAAArG,GAAI,SAAA8B,OAAAkC,OAAAyC,EAAA,EAAAzC,CAAQhE,GAAR,CAAcoF,OAAS,CACzEiB,IAGF,OACE1E,EAAAb,EAAAc,cAAC8E,EAAA,SAAD,KACE/E,EAAAb,EAAAc,cAAA,UAAQY,UAAU,eAAlB,eACAb,EAAAb,EAAAc,cAAA,OAAKY,UAAU,OACZxC,EAAK2G,OAAS,EACbhF,EAAAb,EAAAc,cAACgF,EAAD,CACE1G,OAAQ,IACRD,MAAO,IACPE,OAAQ,GACRH,KAAMA,EACNI,WAAW,IAGbuB,EAAAb,EAAAc,cAACiF,EAAD,CAAenE,QAASA,IAE1Bf,EAAAb,EAAAc,cAACkF,EAAD,CAAUlD,WAAYA,OCvBfmD,MATf,WACE,OACEpF,EAAAb,EAAAc,cAACD,EAAAb,EAAMkG,SAAP,KAEErF,EAAAb,EAAAc,cAACqF,EAAD,QCIcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO7F,EAAAb,EAAAc,cAAC6F,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpE,KAAK,SAAAqE,GACjCA,EAAaC","file":"static/js/main.7a52cbd1.chunk.js","sourcesContent":["import React from \"react\";\nimport * as d3 from \"d3\";\nimport \"./styles.css\";\n\nfunction LineChart({ data, width, height, margin, gridLines }) {\n  const h = height - 2 * margin;\n  const w = width - 2 * margin;\n\n  const points = data\n    .map(p => ({\n      x: new Date(p.x),\n      y: p.y\n    }))\n    .sort((a, b) => b.x - a.x);\n\n  const yFormat = d3.format(\".2\");\n\n  //x scale\n  const x = d3\n    .scaleTime()\n    .domain(d3.extent(points, d => d.x))\n    .range([margin, w]);\n\n  //y scale\n  const y = d3\n    .scaleLinear()\n    .domain([d3.min(points, d => d.y), d3.max(points, d => d.y)])\n    .range([h, margin]);\n\n  const line = d3\n    .line()\n    .x(d => x(d.x))\n    .y(d => y(d.y))\n    .curve(d3.curveCatmullRom.alpha(0.5));\n\n  const xTicks = x.ticks(6).map((d, i) =>\n    x(d) > margin && x(d) < w ? (\n      <g key={`${i}`} transform={`translate(${x(d)},${h + margin})`}>\n        <text>{d.toLocaleDateString(\"de\")}</text>\n        <text transform=\"translate(0, 15)\">{d.toLocaleTimeString(\"de\")}</text>\n        <line x1=\"0\" x2=\"0\" y1=\"0\" y2=\"5\" transform=\"translate(0,-20)\" />\n      </g>\n    ) : null\n  );\n\n  const yTicks = y.ticks(5).map((d, i) => (\n    <g key={`${i}`} transform={`translate(${margin},${y(d)})`}>\n      <text x=\"-12\" y=\"5\">\n        {yFormat(d)}\n      </text>\n      <line stroke=\"#000\" x2=\"-3\" />\n      {gridLines && (\n        <line\n          className=\"gridline\"\n          x1=\"0\"\n          x2={w - margin}\n          y1=\"0\"\n          y2=\"0\"\n          transform=\"translate(-5,0)\"\n        />\n      )}\n    </g>\n  ));\n\n  return (\n    <svg width={width} height={height}>\n      <line className=\"axis\" x1={margin} x2={w} y1={h} y2={h} />\n      <line className=\"axis\" x1={margin} x2={margin} y1={margin} y2={h} />\n      <path d={line(points)} />\n      <g className=\"axis__labels\">{xTicks}</g>\n      <g className=\"axis__labels\">{yTicks}</g>\n    </svg>\n  );\n}\n\nexport default LineChart;\n","import React from \"react\";\nimport \"./styles.css\";\nimport Spinner from \"@atlaskit/spinner\";\n\nfunction ErrorOrLoader({ isError }) {\n  return (\n    <div className=\"app__placeholder center-block\">\n      {isError ? (\n        <span className=\"app__placeholder--errortext\">\n          Oppsss, Something went wrong.!!\n        </span>\n      ) : (\n        <Spinner size=\"large\" />\n      )}\n    </div>\n  );\n}\n\nexport default ErrorOrLoader;\n","/**\n * base URL for calling endpoins, in real apps should be\n * configured in config files or through Node env varibales\n */\nconst baseURL = \"https://konuxdata.getsandbox.com\";\n\n/**\n * Parses the JSON returned by a network request\n *\n * @param  {object} response A response from a network request\n *\n * @return {object}          The parsed JSON from the request\n */\nfunction parseJSON(response) {\n  if (response.status === 204 || response.status === 205) {\n    return null;\n  }\n  return response.json();\n}\n\n/**\n * Checks if a network request came back fine, and throws an error if not\n *\n * @param  {object} response   A response from a network request\n *\n * @return {object|undefined} Returns either the response, or throws an error\n */\nfunction checkStatus(response) {\n  if (response.status >= 200 && response.status < 300) {\n    return response;\n  }\n\n  const error = new Error(response.statusText);\n  error.response = response;\n  throw error;\n}\n\n/**\n * Requests a URL, returning a promise\n *\n * @param  {string} url       The URL we want to request\n * @param  {object} [options] The options we want to pass to \"fetch\"\n *\n * @return {object}           The response data\n */\nexport default function request(endpoint, options) {\n  return fetch(`${baseURL}${endpoint}`, options)\n    .then(checkStatus)\n    .then(parseJSON);\n}\n","import React, { useState, useCallback } from \"react\";\nimport FieldRange from \"@atlaskit/field-range\";\nimport { DateTimePicker } from \"@atlaskit/datetime-picker\";\nimport \"./styles.css\";\nimport request from \"../../utils/request\";\n\nfunction AddPoint({ onAddPoint }) {\n  const [rangeValue, setRangeValue] = useState(0);\n  const [dateTime, setDateTime] = useState(\"2018-04-19T10:00:00+00:00\");\n  const [isError, setIsError] = useState(false);\n  const [isSucess, setIsSuccess] = useState(false);\n\n  const onValueChange = useCallback(value => setRangeValue(value), []);\n  const onDateChange = useCallback(value => setDateTime(value), []);\n\n  const onAddPointClick = useCallback(() => {\n    const point = { x: dateTime, y: rangeValue };\n    request(\"/points\", { method: \"post\", body: JSON.stringify(point) })\n      .then(() => {\n        onAddPoint(point);\n        setIsSuccess(true);\n        setIsError(false);\n        setRangeValue(0);\n        setDateTime(\"2018-04-19T10:00:00+00:00\");\n        setTimeout(() => setIsSuccess(false), 2000);\n      })\n      .catch(() => {\n        setIsError(true);\n        setIsSuccess(false);\n      });\n  }, [rangeValue, dateTime]);\n\n  return (\n    <div className=\"add-point\">\n      <span className=\"add-point__value--label\">Select Value</span>\n      <div className=\"add-point__value center-block\">\n        <FieldRange\n          value={rangeValue}\n          min={-20}\n          max={20}\n          step={1}\n          onChange={onValueChange}\n        />\n        <span className=\"add-point__value--value\">{rangeValue}</span>\n      </div>\n      <div className=\"add-point__date\">\n        <span className=\"add-point__date--label\">Select date and time</span>\n        <DateTimePicker\n          defaultValue={dateTime}\n          onChange={onDateChange}\n          timeIsEditable\n        />\n      </div>\n      <div className=\"add-point__button\">\n        <div className=\"add-point__feedback\">\n          {isError && (\n            <span className=\"add-point__feedback--error\">\n              Oppsss, something went wrong while adding point\n            </span>\n          )}\n          {isSucess && (\n            <span className=\"add-point__feedback--success\">\n              Point added successfully\n            </span>\n          )}\n        </div>\n        <button onClick={onAddPointClick}>Add point</button>\n      </div>\n    </div>\n  );\n}\n\nexport default AddPoint;\n","import React, { useState, useEffect, useCallback, Fragment } from \"react\";\nimport \"./styles.css\";\nimport LineChart from \"../../components/LineChart\";\nimport ErrorOrLoader from \"../../components/ErrorOrLoader\";\nimport AddPoint from \"../../components/AddPoint\";\nimport request from \"../../utils/request\";\n\nfunction HomePage() {\n  const [data, setData] = useState([]);\n  const [isError, setIsError] = useState(false);\n\n  useEffect(() => {\n    request(\"/data\")\n      .then(result => setData(result.values))\n      .catch(() => setIsError(true));\n  }, [setData]);\n\n  const onAddPoint = useCallback(point => setData(data => [...data, point]), [\n    setData\n  ]);\n\n  return (\n    <Fragment>\n      <header className=\"app__header\">D3 Demo App</header>\n      <div className=\"app\">\n        {data.length > 0 ? (\n          <LineChart\n            height={500}\n            width={800}\n            margin={20}\n            data={data}\n            gridLines={true}\n          />\n        ) : (\n          <ErrorOrLoader isError={isError} />\n        )}\n        <AddPoint onAddPoint={onAddPoint} />\n      </div>\n    </Fragment>\n  );\n}\n\nexport default HomePage;\n","import React from \"react\";\nimport \"./app-styles.css\";\nimport HomePage from \"../HomePage\";\n\nfunction App() {\n  return (\n    <React.Fragment>\n      {/* Routing should be done here */}\n      <HomePage />\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./containers/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}